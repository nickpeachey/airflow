affinity: {}
airflowConfigAnnotations: {}
airflowHome: /opt/airflow
airflowLocalSettings: "{{- if semverCompare \">=2.2.0 <3.0.0\" .Values.airflowVersion\
  \ }}\n{{- if not (or .Values.webserverSecretKey .Values.webserverSecretKeySecretName)\
  \ }}\nfrom airflow.www.utils import UIAlert\n\nDASHBOARD_UIALERTS = [\n  UIAlert(\n\
  \    'Usage of a dynamic webserver secret key detected. We recommend a static webserver\
  \ secret key instead.'\n    ' See the <a href='\n    '\"https://airflow.apache.org/docs/helm-chart/stable/production-guide.html#webserver-secret-key\"\
  \ '\n    'target=\"_blank\" rel=\"noopener noreferrer\">'\n    'Helm Chart Production\
  \ Guide</a> for more details.',\n    category=\"warning\",\n    roles=[\"Admin\"\
  ],\n    html=True,\n  )\n]\n{{- end }}\n{{- end }}"
airflowPodAnnotations: {}
airflowVersion: 2.10.5
allowPodLaunching: true
apiServer:
  allowPodLogReading: true
  args:
  - bash
  - -c
  - exec airflow api-server
  command: null
  env: []
  extraContainers: []
  labels: {}
  livenessProbe:
    failureThreshold: 5
    initialDelaySeconds: 15
    periodSeconds: 10
    scheme: HTTP
    timeoutSeconds: 5
  networkPolicy:
    ingress:
      from: []
      ports:
      - port: '{{ .Values.ports.apiServer }}'
  podDisruptionBudget:
    config:
      maxUnavailable: 1
    enabled: false
  readinessProbe:
    failureThreshold: 5
    initialDelaySeconds: 15
    periodSeconds: 10
    scheme: HTTP
    timeoutSeconds: 5
  resources: {}
  securityContexts:
    container: {}
    pod: {}
  service:
    annotations: {}
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    ports:
    - name: api-server
      port: '{{ .Values.ports.apiServer }}'
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  startupProbe:
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 10
    scheme: HTTP
    timeoutSeconds: 20
  waitForMigrations:
    enabled: true
    env: []
    securityContexts:
      container: {}
cleanup:
  affinity: {}
  args:
  - bash
  - -c
  - exec airflow kubernetes cleanup-pods --namespace={{ .Release.Namespace }}
  command: null
  containerLifecycleHooks: {}
  enabled: false
  env: []
  failedJobsHistoryLimit: null
  jobAnnotations: {}
  labels: {}
  nodeSelector: {}
  podAnnotations: {}
  priorityClassName: null
  resources: {}
  schedule: '*/15 * * * *'
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  successfulJobsHistoryLimit: null
  tolerations: []
  topologySpreadConstraints: []
config:
  celery:
    flower_url_prefix: '{{ ternary "" .Values.ingress.flower.path (eq .Values.ingress.flower.path
      "/") }}'
    worker_concurrency: 16
  celery_kubernetes_executor:
    kubernetes_queue: kubernetes
  core:
    auth_manager: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    colored_console_log: 'False'
    dags_folder: '{{ include "airflow_dags" . }}'
    executor: '{{ .Values.executor }}'
    load_examples: 'False'
    remote_logging: '{{- ternary "True" "False" (or .Values.elasticsearch.enabled
      .Values.opensearch.enabled) }}'
  elasticsearch:
    json_format: 'True'
    log_id_template: '{dag_id}_{task_id}_{execution_date}_{try_number}'
  elasticsearch_configs:
    max_retries: 3
    retry_timeout: 'True'
    timeout: 30
  kerberos:
    ccache: '{{ .Values.kerberos.ccacheMountPath }}/{{ .Values.kerberos.ccacheFileName
      }}'
    keytab: '{{ .Values.kerberos.keytabPath }}'
    principal: '{{ .Values.kerberos.principal }}'
    reinit_frequency: '{{ .Values.kerberos.reinitFrequency }}'
  kubernetes:
    airflow_configmap: '{{ include "airflow_config" . }}'
    airflow_local_settings_configmap: '{{ include "airflow_config" . }}'
    multi_namespace_mode: '{{ ternary "True" "False" .Values.multiNamespaceMode }}'
    namespace: '{{ .Release.Namespace }}'
    pod_template_file: '{{ include "airflow_pod_template_file" . }}/pod_template_file.yaml'
    worker_container_repository: '{{ .Values.images.airflow.repository | default .Values.defaultAirflowRepository
      }}'
    worker_container_tag: '{{ .Values.images.airflow.tag | default .Values.defaultAirflowTag
      }}'
  kubernetes_executor:
    multi_namespace_mode: '{{ ternary "True" "False" .Values.multiNamespaceMode }}'
    namespace: '{{ .Release.Namespace }}'
    pod_template_file: '{{ include "airflow_pod_template_file" . }}/pod_template_file.yaml'
    worker_container_repository: '{{ .Values.images.airflow.repository | default .Values.defaultAirflowRepository
      }}'
    worker_container_tag: '{{ .Values.images.airflow.tag | default .Values.defaultAirflowTag
      }}'
  logging:
    colored_console_log: 'False'
    remote_logging: '{{- ternary "True" "False" (or .Values.elasticsearch.enabled
      .Values.opensearch.enabled) }}'
  metrics:
    statsd_host: '{{ printf "%s-statsd" (include "airflow.fullname" .) }}'
    statsd_on: '{{ ternary "True" "False" .Values.statsd.enabled }}'
    statsd_port: 9125
    statsd_prefix: airflow
  scheduler:
    run_duration: 41460
    standalone_dag_processor: '{{ ternary "True" "False" (or (semverCompare ">=3.0.0"
      .Values.airflowVersion) (.Values.dagProcessor.enabled | default false)) }}'
    statsd_host: '{{ printf "%s-statsd" (include "airflow.fullname" .) }}'
    statsd_on: '{{ ternary "True" "False" .Values.statsd.enabled }}'
    statsd_port: 9125
    statsd_prefix: airflow
  webserver:
    enable_proxy_fix: 'True'
    rbac: 'True'
containerLifecycleHooks: {}
createUserJob:
  affinity: {}
  annotations: {}
  applyCustomEnv: true
  args:
  - bash
  - -c
  - 'exec \

    airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "users create"
    "create_user" }} "$@"'
  - --
  - -r
  - '{{ .Values.webserver.defaultUser.role }}'
  - -u
  - '{{ .Values.webserver.defaultUser.username }}'
  - -e
  - '{{ .Values.webserver.defaultUser.email }}'
  - -f
  - '{{ .Values.webserver.defaultUser.firstName }}'
  - -l
  - '{{ .Values.webserver.defaultUser.lastName }}'
  - -p
  - '{{ .Values.webserver.defaultUser.password }}'
  command: null
  containerLifecycleHooks: {}
  env: []
  extraContainers: []
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  jobAnnotations: {}
  labels: {}
  nodeSelector: {}
  priorityClassName: null
  resources: {}
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  tolerations: []
  topologySpreadConstraints: []
  ttlSecondsAfterFinished: 300
  useHelmHooks: true
dagProcessor:
  affinity: {}
  annotations: {}
  args:
  - bash
  - -c
  - exec airflow dag-processor
  command: null
  containerLifecycleHooks: {}
  enabled: null
  env: []
  extraContainers: []
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  livenessProbe:
    command: null
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 60
    timeoutSeconds: 20
  logGroomerSidecar:
    args:
    - bash
    - /clean-logs
    command: null
    enabled: true
    env: []
    frequencyMinutes: 15
    resources: {}
    retentionDays: 15
    securityContexts:
      container: {}
  nodeSelector: {}
  podAnnotations: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  revisionHistoryLimit: null
  safeToEvict: true
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
  terminationGracePeriodSeconds: 60
  tolerations: []
  topologySpreadConstraints: []
  waitForMigrations:
    enabled: true
    env: []
    securityContexts:
      container: {}
dags:
  gitSync:
    branch: main
    depth: 1
    enabled: true
    repo: https://github.com/nickpeachey/airflow.git
    rev: HEAD
    subPath: dags
    wait: 60
data:
  brokerUrl: null
  brokerUrlSecretName: null
  metadataConnection:
    db: postgres
    host: null
    pass: postgres
    port: 5432
    protocol: postgresql
    sslmode: disable
    user: postgres
  metadataSecretName: null
  resultBackendConnection: null
  resultBackendSecretName: null
defaultAirflowDigest: null
defaultAirflowRepository: apache/airflow
defaultAirflowTag: 2.10.5
elasticsearch:
  connection: {}
  enabled: false
  secretName: null
enableBuiltInSecretEnvVars:
  AIRFLOW_CONN_AIRFLOW_DB: true
  AIRFLOW__CELERY__BROKER_URL: true
  AIRFLOW__CELERY__CELERY_RESULT_BACKEND: true
  AIRFLOW__CELERY__RESULT_BACKEND: true
  AIRFLOW__CORE__FERNET_KEY: true
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: true
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: true
  AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST: true
  AIRFLOW__ELASTICSEARCH__HOST: true
  AIRFLOW__OPENSEARCH__HOST: true
  AIRFLOW__WEBSERVER__SECRET_KEY: true
env:
- name: AWS_ACCESS_KEY_ID
  value: l7W6DhYLEpP44Vd6ym06
- name: AWS_SECRET_ACCESS_KEY
  value: PB6E6Qsl84cXm7ZSjSxxTpR3LoFVFJpZVZXU3fTl
- name: AIRFLOW__CORE__FERNET_KEY
  value: Q1B3JHzxg7rCNXr1oGqKKoHTBzN8YMBEDlvp0a2rLR8=
- name: AIRFLOW__CORE__LOAD_EXAMPLES
  value: 'False'
- name: AIRFLOW__CORE__REMOTE_LOGGING
  value: 'True'
- name: AIRFLOW__LOGGING__REMOTE_LOGGING
  value: 'True'
- name: AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID
  value: s3_conn
- name: AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER
  value: s3://airflow-logs/
- name: AIRFLOW__KUBERNETES__NAMESPACE
  value: default
- name: AIRFLOW__KUBERNETES__DELETE_WORKER_PODS
  value: 'True'
executor: KubernetesExecutor
extraConfigMaps: {}
extraEnv: null
extraEnvFrom: null
extraSecrets: {}
fernetKey: null
fernetKeySecretName: null
flower:
  affinity: {}
  annotations: {}
  args:
  - bash
  - -c
  - 'exec \

    airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "celery flower"
    "flower" }}'
  command: null
  containerLifecycleHooks: {}
  enabled: false
  env: []
  extraContainers: []
  extraNetworkPolicies: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    failureThreshold: 10
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 5
  networkPolicy:
    ingress:
      from: []
      ports:
      - port: '{{ .Values.ports.flowerUI }}'
  nodeSelector: {}
  password: null
  podAnnotations: {}
  priorityClassName: null
  readinessProbe:
    failureThreshold: 10
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 5
  resources: {}
  revisionHistoryLimit: null
  secretName: null
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  service:
    annotations: {}
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    ports:
    - name: flower-ui
      port: '{{ .Values.ports.flowerUI }}'
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  startupProbe:
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 20
  tolerations: []
  topologySpreadConstraints: []
  username: null
fullnameOverride: ''
gid: 0
images:
  airflow:
    digest: null
    pullPolicy: IfNotPresent
    repository: null
    tag: null
  flower:
    pullPolicy: IfNotPresent
    repository: null
    tag: null
  gitSync:
    pullPolicy: IfNotPresent
    repository: registry.k8s.io/git-sync/git-sync
    tag: v4.3.0
  migrationsWaitTimeout: 60
  pgbouncer:
    pullPolicy: IfNotPresent
    repository: apache/airflow
    tag: airflow-pgbouncer-2025.03.05-1.23.1
  pgbouncerExporter:
    pullPolicy: IfNotPresent
    repository: apache/airflow
    tag: airflow-pgbouncer-exporter-2025.03.05-0.18.0
  pod_template:
    pullPolicy: IfNotPresent
    repository: null
    tag: null
  redis:
    pullPolicy: IfNotPresent
    repository: redis
    tag: 7.2-bookworm
  statsd:
    pullPolicy: IfNotPresent
    repository: quay.io/prometheus/statsd-exporter
    tag: v0.28.0
  useDefaultImageForMigration: false
ingress:
  enabled: null
  flower:
    annotations: {}
    enabled: false
    host: ''
    hosts: []
    ingressClassName: ''
    path: /
    pathType: ImplementationSpecific
    tls:
      enabled: false
      secretName: ''
  pgbouncer:
    annotations: {}
    enabled: false
    host: ''
    hosts: []
    ingressClassName: ''
    path: /metrics
    pathType: ImplementationSpecific
  statsd:
    annotations: {}
    enabled: false
    host: ''
    hosts: []
    ingressClassName: ''
    path: /metrics
    pathType: ImplementationSpecific
  web:
    annotations: {}
    enabled: false
    host: ''
    hosts: []
    ingressClassName: ''
    path: /
    pathType: ImplementationSpecific
    precedingPaths: []
    succeedingPaths: []
    tls:
      enabled: false
      secretName: ''
kerberos:
  ccacheFileName: cache
  ccacheMountPath: /var/kerberos-ccache
  config: "# This is an example config showing how you can use templating and how\
    \ \"example\" config\n# might look like. It works with the test kerberos server\
    \ that we are using during integration\n# testing at Apache Airflow (see `scripts/ci/docker-compose/integration-kerberos.yml`\
    \ but in\n# order to make it production-ready you must replace it with your own\
    \ configuration that\n# Matches your kerberos deployment. Administrators of your\
    \ Kerberos instance should\n# provide the right configuration.\n\n[logging]\n\
    default = \"FILE:{{ template \"airflow_logs_no_quote\" . }}/kerberos_libs.log\"\
    \nkdc = \"FILE:{{ template \"airflow_logs_no_quote\" . }}/kerberos_kdc.log\"\n\
    admin_server = \"FILE:{{ template \"airflow_logs_no_quote\" . }}/kadmind.log\"\
    \n\n[libdefaults]\ndefault_realm = FOO.COM\nticket_lifetime = 10h\nrenew_lifetime\
    \ = 7d\nforwardable = true\n\n[realms]\nFOO.COM = {\n  kdc = kdc-server.foo.com\n\
    \  admin_server = admin_server.foo.com\n}\n"
  configPath: /etc/krb5.conf
  enabled: false
  keytabBase64Content: null
  keytabPath: /etc/airflow.keytab
  principal: airflow@FOO.COM
  reinitFrequency: 3600
labels: {}
limits: []
logs:
  persistence:
    annotations: {}
    enabled: false
    existingClaim: null
    size: 100Gi
    storageClassName: null
migrateDatabaseJob:
  affinity: {}
  annotations: {}
  applyCustomEnv: true
  args:
  - bash
  - -c
  - 'exec \

    airflow {{ semverCompare ">=2.7.0" .Values.airflowVersion | ternary "db migrate"
    (semverCompare ">=2.0.0" .Values.airflowVersion | ternary "db upgrade" "upgradedb")
    }}'
  command: null
  containerLifecycleHooks: {}
  enabled: true
  env: []
  extraContainers: []
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  jobAnnotations: {}
  labels: {}
  nodeSelector: {}
  priorityClassName: null
  resources: {}
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  tolerations: []
  topologySpreadConstraints: []
  ttlSecondsAfterFinished: 300
  useHelmHooks: true
multiNamespaceMode: false
nameOverride: ''
networkPolicies:
  enabled: false
nodeSelector: {}
opensearch:
  connection: {}
  enabled: false
  secretName: null
pgbouncer:
  affinity: {}
  annotations: {}
  args: null
  auth_file: /etc/pgbouncer/users.txt
  auth_type: scram-sha-256
  ciphers: normal
  command:
  - pgbouncer
  - -u
  - nobody
  - /etc/pgbouncer/pgbouncer.ini
  configSecretName: null
  containerLifecycleHooks:
    preStop:
      exec:
        command:
        - /bin/sh
        - -c
        - killall -INT pgbouncer && sleep 120
  enabled: false
  env: []
  extraContainers: []
  extraIni: null
  extraIniMetadata: null
  extraIniResultBackend: null
  extraNetworkPolicies: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  logConnections: 0
  logDisconnections: 0
  maxClientConn: 100
  metadataPoolSize: 10
  metricsExporterSidecar:
    containerLifecycleHooks: {}
    extraVolumeMounts: []
    livenessProbe:
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 1
    readinessProbe:
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 1
    resources: {}
    securityContexts:
      container: {}
    sslmode: disable
    statsSecretKey: null
    statsSecretName: null
  mountConfigSecret: true
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    config:
      maxUnavailable: 1
    enabled: false
  priorityClassName: null
  replicas: 1
  resources: {}
  resultBackendPoolSize: 5
  revisionHistoryLimit: null
  securityContexts:
    container: {}
    pod: {}
  service:
    clusterIp: null
    extraAnnotations: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  ssl:
    ca: null
    cert: null
    key: null
  sslmode: prefer
  tolerations: []
  topologySpreadConstraints: []
  uid: 65534
  verbose: 0
podTemplate: null
ports:
  airflowUI: 8080
  apiServer: 8080
  flowerUI: 5555
  pgbouncer: 6543
  pgbouncerScrape: 9127
  redisDB: 6379
  statsdIngest: 9125
  statsdScrape: 9102
  triggererLogs: 8794
  workerLogs: 8793
postgresql:
  auth:
    enablePostgresUser: true
    password: ''
    postgresPassword: postgres
    username: ''
  enabled: true
priorityClasses: []
quotas: {}
rbac:
  create: true
  createSCCRoleBinding: false
redis:
  affinity: {}
  annotations: {}
  containerLifecycleHooks: {}
  enabled: true
  nodeSelector: {}
  password: null
  passwordSecretName: null
  persistence:
    annotations: {}
    enabled: true
    existingClaim: null
    size: 1Gi
    storageClassName: null
  podAnnotations: {}
  priorityClassName: null
  resources: {}
  safeToEvict: true
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  service:
    clusterIP: null
    nodePort: null
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  terminationGracePeriodSeconds: 600
  tolerations: []
  topologySpreadConstraints: []
  uid: 0
registry:
  connection: {}
  secretName: null
revisionHistoryLimit: null
scheduler:
  affinity: {}
  annotations: {}
  args:
  - bash
  - -c
  - exec airflow scheduler
  command: null
  containerLifecycleHooks: {}
  enabled: true
  env: []
  extraContainers: []
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  labels: {}
  livenessProbe:
    command: null
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 60
    timeoutSeconds: 20
  logGroomerSidecar:
    args:
    - bash
    - /clean-logs
    command: null
    containerLifecycleHooks: {}
    enabled: true
    env: []
    frequencyMinutes: 15
    resources: {}
    retentionDays: 15
    securityContexts:
      container: {}
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    config:
      maxUnavailable: 1
    enabled: false
  priorityClassName: null
  replicas: 1
  resources: {}
  revisionHistoryLimit: null
  safeToEvict: true
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  startupProbe:
    command: null
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 20
  strategy: null
  terminationGracePeriodSeconds: 10
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy: null
  waitForMigrations:
    enabled: true
    env: []
    securityContexts:
      container: {}
schedulerName: null
secret: []
securityContext: {}
securityContexts:
  containers: {}
  pod: {}
statsd:
  affinity: {}
  annotations: {}
  args:
  - --statsd.mapping-config=/etc/statsd-exporter/mappings.yml
  configMapAnnotations: {}
  containerLifecycleHooks: {}
  enabled: true
  env: []
  extraMappings: []
  extraNetworkPolicies: []
  nodeSelector: {}
  overrideMappings: []
  podAnnotations: {}
  priorityClassName: null
  resources: {}
  revisionHistoryLimit: null
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  service:
    extraAnnotations: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  uid: 65534
tolerations: []
topologySpreadConstraints: []
triggerer:
  affinity: {}
  annotations: {}
  args:
  - bash
  - -c
  - exec airflow triggerer
  command: null
  containerLifecycleHooks: {}
  enabled: true
  env: []
  extraContainers: []
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  keda:
    advanced: {}
    cooldownPeriod: 30
    enabled: false
    maxReplicaCount: 10
    minReplicaCount: 0
    namespaceLabels: {}
    pollingInterval: 5
    query: SELECT ceil(COUNT(*)::decimal / {{ include "triggerer.capacity" . }}) FROM
      trigger
    usePgbouncer: false
  labels: {}
  livenessProbe:
    command: null
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 60
    timeoutSeconds: 20
  logGroomerSidecar:
    args:
    - bash
    - /clean-logs
    command: null
    containerLifecycleHooks: {}
    enabled: true
    env: []
    frequencyMinutes: 15
    resources: {}
    retentionDays: 15
    securityContexts:
      container: {}
  nodeSelector: {}
  persistence:
    annotations: {}
    enabled: true
    fixPermissions: false
    persistentVolumeClaimRetentionPolicy: null
    size: 100Gi
    storageClassName: null
  podAnnotations: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  revisionHistoryLimit: null
  safeToEvict: true
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
  terminationGracePeriodSeconds: 60
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy: null
  waitForMigrations:
    enabled: true
    env: []
    securityContexts:
      container: {}
uid: 50000
useStandardNaming: false
volumeMounts: []
volumes: []
webserver:
  affinity: {}
  allowPodLogReading: true
  annotations: {}
  args:
  - bash
  - -c
  - exec airflow webserver
  command: null
  configMapAnnotations: {}
  containerLifecycleHooks: {}
  defaultUser:
    email: admin@example.com
    enabled: true
    firstName: admin
    lastName: user
    password: admin
    role: Admin
    username: admin
  enabled: true
  env: []
  extraContainers: []
  extraInitContainers: []
  extraNetworkPolicies: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  hpa:
    behavior: {}
    enabled: false
    maxReplicaCount: 5
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicaCount: 1
  labels: {}
  livenessProbe:
    failureThreshold: 5
    initialDelaySeconds: 15
    periodSeconds: 10
    scheme: HTTP
    timeoutSeconds: 5
  networkPolicy:
    ingress:
      from: []
      ports:
      - port: '{{ .Values.ports.airflowUI }}'
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
  priorityClassName: null
  readinessProbe:
    failureThreshold: 5
    initialDelaySeconds: 15
    periodSeconds: 10
    scheme: HTTP
    timeoutSeconds: 5
  replicas: 1
  resources: {}
  revisionHistoryLimit: null
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  service:
    annotations: {}
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    ports:
    - name: airflow-ui
      port: '{{ .Values.ports.airflowUI }}'
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  startupProbe:
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 10
    scheme: HTTP
    timeoutSeconds: 20
  strategy: null
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  waitForMigrations:
    enabled: true
    env: []
    securityContexts:
      container: {}
  webserverConfig: null
  webserverConfigConfigMapName: null
webserverSecretKey: null
webserverSecretKeySecretName: null
workers:
  affinity: {}
  annotations: {}
  args:
  - bash
  - -c
  - 'exec \

    airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "celery worker"
    "worker" }}'
  command: null
  containerLifecycleHooks: {}
  env: []
  extraContainers: []
  extraInitContainers: []
  extraPorts: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  hpa:
    behavior: {}
    enabled: false
    maxReplicaCount: 5
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicaCount: 0
  keda:
    advanced: {}
    cooldownPeriod: 30
    enabled: false
    maxReplicaCount: 10
    minReplicaCount: 0
    namespaceLabels: {}
    pollingInterval: 5
    query: SELECT ceil(COUNT(*)::decimal / {{ .Values.config.celery.worker_concurrency
      }}) FROM task_instance WHERE (state='running' OR state='queued') {{- if or (contains
      "CeleryKubernetesExecutor" .Values.executor) (contains "KubernetesExecutor"
      .Values.executor) }} AND queue != '{{ .Values.config.celery_kubernetes_executor.kubernetes_queue
      }}' {{- end }}
    usePgbouncer: true
  kerberosInitContainer:
    enabled: false
    resources: {}
  kerberosSidecar:
    containerLifecycleHooks: {}
    enabled: false
    resources: {}
    securityContexts:
      container: {}
  labels: {}
  livenessProbe:
    command: null
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 60
    timeoutSeconds: 20
  logGroomerSidecar:
    args:
    - bash
    - /clean-logs
    command: null
    enabled: true
    env: []
    frequencyMinutes: 15
    resources: {}
    retentionDays: 15
    securityContexts:
      container: {}
  nodeSelector: {}
  persistence:
    annotations: {}
    containerLifecycleHooks: {}
    enabled: true
    fixPermissions: false
    persistentVolumeClaimRetentionPolicy: null
    securityContexts:
      container: {}
    size: 100Gi
    storageClassName: null
  podAnnotations: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  revisionHistoryLimit: null
  runtimeClassName: null
  safeToEvict: false
  securityContext: {}
  securityContexts:
    container: {}
    pod: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
  terminationGracePeriodSeconds: 600
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy: null
  volumeClaimTemplates: []
  waitForMigrations:
    enabled: true
    env: []
    securityContexts:
      container: {}
